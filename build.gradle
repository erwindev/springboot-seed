apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'net.saliman.cobertura'

buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
		maven { url 'http://repo.spring.io/milestone'}
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.flywaydb:flyway-gradle-plugin:3.2.1")
    classpath("net.saliman:gradle-cobertura-plugin:2.3.1")
    }
}

jar {
    baseName = 'nameofproject'
    version =  '0.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
}

sourceSets {
	integrationTest {
		groovy {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDirs = ['src/integrationtest/groovy']
		}
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"){
		exclude module: 'tomcat-jdbc'
	}
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}"){
		exclude module: 'spring-boot-starter-tomcat'
	}
	//use jetty
	compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

	//Http builder
	//Groovy RESTClient compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

	//compile("org.codehaus.groovy:groovy")
	compile("org.codehaus.groovy:groovy-all:2.4.8")
	compile("org.postgresql:postgresql:9.4.1212")
	//MySQL runtime("mysql:mysql-connector-java:5.1.34")
	//SQL Server compile files("lib/sqljdbc4.jar")
	//Local H2 compile("com.h2database:h2:1.0.60")

	//Hikari Connection Pool
	compile('com.zaxxer:HikariCP:2.6.0')

	//flyway
	compile("org.flywaydb:flyway-core:4.1.0")

	//swagger
	compile("com.mangofactory:swagger-springmvc:1.0.2")


	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.6.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.6.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.5'
	//compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.6.5")

	// http://mvnrepository.com/artifact/ch.qos.logback/logback-core
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.6'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.6'
	compile group: 'ch.qos.logback', name: 'logback-access', version: '1.1.6'

	// http://mvnrepository.com/artifact/org.slf4j/slf4j-api
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.18'

	// http://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
	compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.7'


	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	testCompile("org.spockframework:spock-core:1.0-groovy-2.4") // for unit testing and mocking service layers
	testCompile("org.spockframework:spock-spring:1.0-groovy-2.4")

	testCompile("org.apache.httpcomponents:httpclient:4.5.2")
	testCompile("cglib:cglib-nodep:2.2")

	testRuntime("org.slf4j:slf4j-api:1.7.10")
}

cobertura {
	coverageFormats = ['html', 'xml']
	coverageIgnoreTrivial = true
	coverageIgnores = ['org.slf4j.Logger.*']
	coverageReportDir = new File("$buildDir/reports/cobertura")
}

eclipse {
	classpath {
		// containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		// containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task srcZip(type: Zip) {
	classifier = 'src'
	from sourceSets*.allSource
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
}
